<% layout('layouts/boilerplate.ejs') %>
<div class="user-section hod">
    <h2 class="usermanagement-form-headings">Reset Password</h2>
    <form class="reset-password" action="" method="post">
        <select name="dept" class="reset-form-dept-selector">
            <option value="">--Please choose department--</option>
        </select>
        <select name="emp" class="reset-form-emp-selector">
            <option value="">--Please select employee name--</option>
        </select>
        <div class="login-button-container">
            <button type="submit" class="btn login-btn">Reset Password</button>
        </div>
    </form>
</div>
<template id="flash-mesage">
    <div class="flash success" style="z-index: 9999">
        <div class="flash__icon">
            <i class="icon fa fa-check-circle"></i>
        </div>
        <p class="flash__body">success</p>
    </div>
    <div class="flash fail" style="z-index: 9999">
        <div class="flash__icon">
            <i class="icon fa fa-exclamation-triangle"></i>
        </div>
        <p class="flash__body">Failure</p>
    </div>
</template>
<script>
    let employeeObject = {},
        hodObject = {};
    if (!window.fetch) {
        flash("This browser is not supported.", ".fail");
        setTimeout(redirectHome, 3000);
    } else {
        loadInitialData();
    }
    async function loadInitialData() {
        let response = await postData(
            "/admin/user-management/api/get-employee-data",
            {}
        );
        if (!response.fail) {
            ({ employeeObject, hodObject } = response);
            populateDeptSelector();
        } else {
            flash("Failed to load initial data.", ".fail");
        }
    }
    function redirectHome() {
        window.location.replace(window.location.origin);
    }
    //Password Reset form///////////////////////////////////////////////////
    const resetForm = document.querySelector(".reset-password");
    const resetButton = resetForm.querySelector(".login-button-container");
    const resetFormDeptSelector = resetForm.querySelector(
        ".reset-form-dept-selector"
    );
    const resetFormEmpSelector = resetForm.querySelector(
        ".reset-form-emp-selector"
    );
    resetButton.addEventListener("click", resetPassword);
    resetFormDeptSelector.addEventListener("change", resetEmployeeSelector);

    function populateDeptSelector() {
        for (let d of Object.keys(hodObject)) {
            let option = document.createElement("option");
            option.value = d;
            option.innerText = hodObject[d];
            resetFormDeptSelector.add(option);
        }
    }

    function resetEmployeeSelector(eve) {
        let option = document.createElement("option");
        option.value = "";
        option.innerText = "--Please select employee name--";
        resetFormEmpSelector.innerHTML = "";
        resetFormEmpSelector.add(option);
        if (employeeObject[resetFormDeptSelector.value]) {
            for (let e of employeeObject[resetFormDeptSelector.value]) {
                option = document.createElement("option");
                option.value = e.slice(-5);
                option.innerText = e;
                resetFormEmpSelector.add(option);
            }
        }
    }

    async function resetPassword(e) {
        e.preventDefault();
        if (!resetFormDeptSelector.value || !resetFormEmpSelector.value) {
            flash("Please fill all required fields.", ".fail");
        } else {
            let data = {
                dept: resetFormDeptSelector.value,
                emp: resetFormEmpSelector.value,
            };
            let response = await postData(
                "/admin/user-management/api/password-reset",
                data
            );

            resetFormDeptSelector.selectedIndex = 0;
            resetFormEmpSelector.selectedIndex = 0;
            if (response.fail) {
                if (!response.message) response.message = "Unknown Error!!!";
                flash(response.message, ".fail");
            } else {
                flash(response.message, ".success");
            }
        }
    }
    ////////////////////////////////////////////////////////////////////////

    async function postData(url = "", data = {}) {
        try {
            // Default options are marked with *
            const response = await fetch(url, {
                method: "POST", // *GET, POST, PUT, DELETE, etc.
                mode: "cors", // no-cors, *cors, same-origin
                cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
                credentials: "same-origin", // include, *same-origin, omit
                headers: {
                    "Content-Type": "application/json",
                    // 'Content-Type': 'application/x-www-form-urlencoded',
                },
                redirect: "follow", // manual, *follow, error
                referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                body: JSON.stringify(data), // body data type must match "Content-Type" header
            });
            if (response.ok) {
                let resData = await response.json(); // parses JSON response into native JavaScript objects
                return resData;
            } else {
                return { fail: true, message: "Error: Operation failed." };
            }
        } catch (err) {
            return { fail: true, message: "Error: Operation failed." };
        }
    }
    async function getData(url = "") {
        try {
            const response = await fetch(url, { cache: "no-cache" });
            if (response.ok) {
                let resData = await response.json();
                return resData;
            } else {
                return { fail: true, message: "Error: Operation failed." };
            }
        } catch (err) {
            return { fail: true, message: "Error: Operation failed." };
        }
    }

    function flash(message, typeClass) {
        const card = document
            .querySelector("#flash-mesage")
            .content.querySelector(typeClass)
            .cloneNode(true);
        card.querySelector("p").textContent = message;
        document.body.appendChild(card);
        document
            .querySelector(".flash")
            .classList.add("animate--drop-in-fade-out");
        setTimeout(function () {
            document
                .querySelector(".flash")
                .classList.remove("animate--drop-in-fade-out");
            document.querySelector(".flash").remove();
        }, 3500);
    }
</script>
<% if (currentUser.role === "DPLAdmin") { %>
<hr />
<div class="user-section dpladmin">
    <h2 class="usermanagement-form-headings">Exception User Accounts</h2>
    <form class="exception-user-form" action="" method="post">
        <div class="div-inside-form">
            <select name="emp" class="exception-form-emp-selector"></select>
            <textarea
                class="exception-user-json"
                name=""
                id=""
                cols="10"
                rows="10"
                spellcheck="false"
            ></textarea>
            <div>
                <input
                    type="checkbox"
                    name="delete"
                    id="exception-user-delete-option"
                    class="delete-option"
                />
                <label for="exception-user-delete-option">Delete User</label>
            </div>
        </div>
        <div class="login-button-container">
            <button type="submit" class="btn login-btn">Submit</button>
        </div>
    </form>
    <hr />
    <h2 class="usermanagement-form-headings">Assign User Role</h2>
    <form class="user-role-form" action="" method="post">
        <select name="dept" class="role-form-dept-selector">
            <option value="">--Please choose department--</option>
        </select>
        <select name="emp" class="role-form-emp-selector">
            <option value="">--Please select employee name--</option>
        </select>
        <select name="role" class="role-form-role-selector">
            <option value="">--Please select role--</option>
        </select>
        <div class="login-button-container">
            <button type="submit" class="btn login-btn">Submit</button>
        </div>
    </form>
    <hr />
    <h2 class="usermanagement-form-headings">Assign HoD</h2>
    <form class="dept-hod-form" action="" method="post">
        <select name="dept" class="hod-form-dept-selector">
            <option value="">--Please choose department--</option>
        </select>
        <select name="role" class="hod-form-hod-selector">
            <option value="">--Please select HoD--</option>
        </select>
        <div class="login-button-container">
            <button type="submit" class="btn login-btn">Submit</button>
        </div>
    </form>
</div>
<script>
    //Exception user form///////////////////////////////////////////////////
    let allExceptionUser = {};
    const exceptionUserForm = document.querySelector(".exception-user-form");
    const exceptionUserSubmitButton = exceptionUserForm.querySelector(
        ".login-button-container"
    );
    const exceptionUserSelector = exceptionUserForm.querySelector(
        ".exception-form-emp-selector"
    );

    const exceptionUserDetails = exceptionUserForm.querySelector(
        ".exception-user-json"
    );
    const deleteExcpetionUserChkBox = exceptionUserForm.querySelector(
        "#exception-user-delete-option"
    );

    exceptionUserSelector.addEventListener("change", fillExceptionUserDetails);
    exceptionUserSubmitButton.addEventListener("click", updateExceptionUser);
    loadExceptionUsers();

    function fillExceptionUserDetails(e) {
        if (e.target.value) {
            if (e.target.value === "addNew") {
                exceptionUserDetails.value = JSON.stringify({
                    userId: "",
                    name: "",
                    type: "",
                    password: "",
                    dashboards: { key: "value" },
                    defaultRoute: "",
                    scadaMode: false,
                });
            } else {
                exceptionUserDetails.value = JSON.stringify(
                    allExceptionUser[e.target.value]
                );
            }
        } else {
            exceptionUserDetails.value = "";
        }
    }

    async function updateExceptionUser(e) {
        e.preventDefault();
        let deleteUser = deleteExcpetionUserChkBox.checked;
        let username = exceptionUserSelector.value;
        let userData;
        try {
            userData = JSON.parse(exceptionUserDetails.value);
        } catch {
            userData = {};
        }
        if (username && Object.keys(userData).length > 0) {
            let finalData = { username, userData, deleteUser };
            let response = await postData(
                "/admin/user-management/api/exception-users",
                finalData
            );
            if (response.fail) {
                if (!response.message) response.message = "Unknown Error!!!";
                flash(response.message, ".fail");
            } else {
                flash(response.message, ".success");
                loadExceptionUsers();
                exceptionUserSelector.selectedIndex = 0;
                exceptionUserDetails.value = "";
            }
        } else {
            flash("No user/details provided.", ".fail");
        }
    }

    async function loadExceptionUsers() {
        exceptionUserSelector.innerHTML = "";
        allExceptionUser = await getData(
            "/admin/user-management/api/exception-users"
        );
        if (!allExceptionUser.fail) {
            let option = document.createElement("option");
            option.value = "";
            option.innerText = "--Please select Exception user--";
            exceptionUserSelector.add(option);
            option = document.createElement("option");
            option.value = "addNew";
            option.innerText = "Create new";
            exceptionUserSelector.add(option);
            for (let e of Object.keys(allExceptionUser)) {
                option = document.createElement("option");
                option.value = e;
                option.innerText = e;
                exceptionUserSelector.add(option);
            }
        }
    }
    ////////////////////////////////////////////////////////////////////////
</script>
<% } %>
