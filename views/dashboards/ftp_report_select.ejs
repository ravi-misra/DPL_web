<% layout('layouts/boilerplate.ejs') %>
<div class="ftp-report-selector-outer">
    <h1 class="ftp-report-select">Edit/Print Shift Report</h1>
    <div class="container-ftp-report-select">
        <form id="ftpReportSelectForm">
            <input
                type="date"
                id="ftp-report-date"
                placeholder="Select date"
                required
            />
            <select id="ftp-selected-shift" required>
                <option value="">Select Shift</option>
                <option value="A">A</option>
                <option value="B">B</option>
                <option value="C">C</option>
            </select>
            <br />
            <div class="login-button-container">
                <button type="submit" class="btn login-btn">Submit</button>
            </div>
        </form>
    </div>
</div>
<template id="flash-mesage">
    <div class="flash success" style="z-index: 9999">
        <div class="flash__icon">
            <i class="icon fa fa-check-circle"></i>
        </div>
        <p class="flash__body">success</p>
    </div>
    <div class="flash fail" style="z-index: 9999">
        <div class="flash__icon">
            <i class="icon fa fa-exclamation-triangle"></i>
        </div>
        <p class="flash__body">Failure</p>
    </div>
</template>
<script>
    async function postData(url = "", data = {}) {
        try {
            // Default options are marked with *
            const response = await fetch(url, {
                method: "POST", // *GET, POST, PUT, DELETE, etc.
                mode: "cors", // no-cors, *cors, same-origin
                cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
                credentials: "same-origin", // include, *same-origin, omit
                headers: {
                    "Content-Type": "application/json",
                    // 'Content-Type': 'application/x-www-form-urlencoded',
                },
                redirect: "follow", // manual, *follow, error
                referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                body: JSON.stringify(data), // body data type must match "Content-Type" header
            });
            if (response.ok) {
                let resData = await response.json(); // parses JSON response into native JavaScript objects
                return resData;
            } else {
                return { fail: true, message: "Error: Operation failed." };
            }
        } catch (err) {
            return { fail: true, message: "Error: Operation failed." };
        }
    }
    async function getData(url = "") {
        try {
            const response = await fetch(url, { cache: "no-cache" });
            if (response.ok) {
                let resData = await response.json();
                return resData;
            } else {
                return { fail: true, message: "Error: Operation failed." };
            }
        } catch (err) {
            return { fail: true, message: "Error: Operation failed." };
        }
    }

    function flash(message, typeClass) {
        const card = document
            .querySelector("#flash-mesage")
            .content.querySelector(typeClass)
            .cloneNode(true);
        card.querySelector("p").textContent = message;
        document.body.appendChild(card);
        document
            .querySelector(".flash")
            .classList.add("animate--drop-in-fade-out");
        setTimeout(function () {
            document
                .querySelector(".flash")
                .classList.remove("animate--drop-in-fade-out");
            document.querySelector(".flash").remove();
        }, 3500);
    }

    document
        .getElementById("ftpReportSelectForm")
        .addEventListener("submit", async function (event) {
            event.preventDefault();

            const date = document.getElementById("ftp-report-date").value;
            const shift = document.getElementById("ftp-selected-shift").value;

            if (!date || !shift) {
                flash("Please select both Date and Shift!", ".fail");
            } else {
                const bodyData = {
                    date: date,
                    shift: shift,
                };
                // Send the JSON data to the server (replace 'your-server-url' with actual URL)
                fetch("/api/ftp/select-report", {
                    method: "POST", // *GET, POST, PUT, DELETE, etc.
                    mode: "cors", // no-cors, *cors, same-origin
                    cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
                    credentials: "same-origin", // include, *same-origin, omit
                    headers: {
                        "Content-Type": "application/json",
                        // 'Content-Type': 'application/x-www-form-urlencoded',
                    },
                    redirect: "follow", // manual, *follow, error
                    referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                    body: JSON.stringify(bodyData), // body data type must match "Content-Type" header
                })
                    .then((response) => {
                        if (
                            response.headers.get("content-type") ===
                            "text/html; charset=utf-8"
                        ) {
                            return response.text();
                        }
                        // Check if the response is a PDF (blob)
                        else if (
                            response.headers.get("content-type") ===
                            "application/pdf"
                        ) {
                            return response.blob();
                        } else {
                            return response.json();
                        }
                    })
                    .then((data) => {
                        if (data instanceof Blob) {
                            // If it's a PDF, download it
                            const downloadLink = document.createElement("a");
                            const url = window.URL.createObjectURL(data);
                            downloadLink.href = url;
                            downloadLink.download = `shift-report_${date}_${shift}.pdf`; // Adjust the filename as necessary
                            document.body.appendChild(downloadLink);
                            downloadLink.click();
                            window.URL.revokeObjectURL(url);
                            downloadLink.remove();
                            flash("Report downloaded!!!", ".success");
                        } else if (typeof data == "object") {
                            if (data.action === "manual-entry") {
                                if (confirm(data.message)) {
                                    return fetch("/api/ftp/manual-entry", {
                                        method: "POST", // *GET, POST, PUT, DELETE, etc.
                                        mode: "cors", // no-cors, *cors, same-origin
                                        cache: "no-cache", // *default, no-cache, reload, force-cache, only-if-cached
                                        credentials: "same-origin", // include, *same-origin, omit
                                        headers: {
                                            "Content-Type": "application/json",
                                            // 'Content-Type': 'application/x-www-form-urlencoded',
                                        },
                                        redirect: "follow", // manual, *follow, error
                                        referrerPolicy: "no-referrer", // no-referrer, *no-referrer-when-downgrade, origin, origin-when-cross-origin, same-origin, strict-origin, strict-origin-when-cross-origin, unsafe-url
                                        body: JSON.stringify(bodyData), // body data type must match "Content-Type" header
                                    })
                                        .then((blankresponse) => {
                                            return blankresponse.text();
                                        })
                                        .then((blankform) => {
                                            document.write(blankform);
                                        })
                                        .catch((error) => {
                                            console.error("Error:", error);
                                        });
                                }
                            }
                        } else {
                            document.write(data);
                        }
                    })
                    .catch((error) => {
                        console.error("Error:", error);
                    });
            }
        });
</script>
